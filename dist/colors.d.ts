import type { Optional } from '@cssfn/types';
import type { Prop, Cust } from '@cssfn/css-types';
import Color from 'color';
declare type ColorType = Prop.Color | Cust.Expr;
export type { ColorType as Color };
export declare const cssProps: import("@cssfn/css-config").Refs<{
    primaryBold: ColorType;
    secondaryBold: ColorType;
    successBold: ColorType;
    infoBold: ColorType;
    warningBold: ColorType;
    dangerBold: ColorType;
    lightBold: ColorType;
    darkBold: ColorType;
    primaryMild: ColorType;
    secondaryMild: ColorType;
    successMild: ColorType;
    infoMild: ColorType;
    warningMild: ColorType;
    dangerMild: ColorType;
    lightMild: ColorType;
    darkMild: ColorType;
    primaryThin: ColorType;
    secondaryThin: ColorType;
    successThin: ColorType;
    infoThin: ColorType;
    warningThin: ColorType;
    dangerThin: ColorType;
    lightThin: ColorType;
    darkThin: ColorType;
    primaryText: ColorType;
    secondaryText: ColorType;
    successText: ColorType;
    infoText: ColorType;
    warningText: ColorType;
    dangerText: ColorType;
    lightText: ColorType;
    darkText: ColorType;
    backgThin: ColorType;
    backgMild: ColorType;
    backgBold: ColorType;
    foregThin: ColorType;
    foregMild: ColorType;
    foregBold: ColorType;
    foreg: ColorType;
    backg: ColorType;
    primary: ColorType;
    secondary: ColorType;
    success: ColorType;
    info: ColorType;
    warning: ColorType;
    danger: ColorType;
    light: ColorType;
    dark: ColorType;
    blue: ColorType;
    indigo: ColorType;
    purple: ColorType;
    pink: ColorType;
    red: ColorType;
    orange: ColorType;
    yellow: ColorType;
    green: ColorType;
    teal: ColorType;
    cyan: ColorType;
    black: ColorType;
    white: ColorType;
    gray: ColorType;
    grayDark: ColorType;
}>, cssDecls: import("@cssfn/css-config").Decls<{
    primaryBold: ColorType;
    secondaryBold: ColorType;
    successBold: ColorType;
    infoBold: ColorType;
    warningBold: ColorType;
    dangerBold: ColorType;
    lightBold: ColorType;
    darkBold: ColorType;
    primaryMild: ColorType;
    secondaryMild: ColorType;
    successMild: ColorType;
    infoMild: ColorType;
    warningMild: ColorType;
    dangerMild: ColorType;
    lightMild: ColorType;
    darkMild: ColorType;
    primaryThin: ColorType;
    secondaryThin: ColorType;
    successThin: ColorType;
    infoThin: ColorType;
    warningThin: ColorType;
    dangerThin: ColorType;
    lightThin: ColorType;
    darkThin: ColorType;
    primaryText: ColorType;
    secondaryText: ColorType;
    successText: ColorType;
    infoText: ColorType;
    warningText: ColorType;
    dangerText: ColorType;
    lightText: ColorType;
    darkText: ColorType;
    backgThin: ColorType;
    backgMild: ColorType;
    backgBold: ColorType;
    foregThin: ColorType;
    foregMild: ColorType;
    foregBold: ColorType;
    foreg: ColorType;
    backg: ColorType;
    primary: ColorType;
    secondary: ColorType;
    success: ColorType;
    info: ColorType;
    warning: ColorType;
    danger: ColorType;
    light: ColorType;
    dark: ColorType;
    blue: ColorType;
    indigo: ColorType;
    purple: ColorType;
    pink: ColorType;
    red: ColorType;
    orange: ColorType;
    yellow: ColorType;
    green: ColorType;
    teal: ColorType;
    cyan: ColorType;
    black: ColorType;
    white: ColorType;
    gray: ColorType;
    grayDark: ColorType;
}>, cssVals: import("@cssfn/css-config").Vals<{
    primaryBold: ColorType;
    secondaryBold: ColorType;
    successBold: ColorType;
    infoBold: ColorType;
    warningBold: ColorType;
    dangerBold: ColorType;
    lightBold: ColorType;
    darkBold: ColorType;
    primaryMild: ColorType;
    secondaryMild: ColorType;
    successMild: ColorType;
    infoMild: ColorType;
    warningMild: ColorType;
    dangerMild: ColorType;
    lightMild: ColorType;
    darkMild: ColorType;
    primaryThin: ColorType;
    secondaryThin: ColorType;
    successThin: ColorType;
    infoThin: ColorType;
    warningThin: ColorType;
    dangerThin: ColorType;
    lightThin: ColorType;
    darkThin: ColorType;
    primaryText: ColorType;
    secondaryText: ColorType;
    successText: ColorType;
    infoText: ColorType;
    warningText: ColorType;
    dangerText: ColorType;
    lightText: ColorType;
    darkText: ColorType;
    backgThin: ColorType;
    backgMild: ColorType;
    backgBold: ColorType;
    foregThin: ColorType;
    foregMild: ColorType;
    foregBold: ColorType;
    foreg: ColorType;
    backg: ColorType;
    primary: ColorType;
    secondary: ColorType;
    success: ColorType;
    info: ColorType;
    warning: ColorType;
    danger: ColorType;
    light: ColorType;
    dark: ColorType;
    blue: ColorType;
    indigo: ColorType;
    purple: ColorType;
    pink: ColorType;
    red: ColorType;
    orange: ColorType;
    yellow: ColorType;
    green: ColorType;
    teal: ColorType;
    cyan: ColorType;
    black: ColorType;
    white: ColorType;
    gray: ColorType;
    grayDark: ColorType;
}>, cssConfig: import("@cssfn/css-config").CssConfigSettings;
export { cssProps as colors, cssProps as default };
export declare const configProxy: {
    thinLevel: number;
    mildLevel: number;
    boldLevel: number;
};
export { configProxy as config };
declare const themesProxy: {
    primary: Cust.Ref;
    secondary: Cust.Ref;
    success: Cust.Ref;
    info: Cust.Ref;
    warning: Cust.Ref;
    danger: Cust.Ref;
    light: Cust.Ref;
    dark: Cust.Ref;
};
declare const themesTextProxy: {
    primaryText: Cust.Ref;
    secondaryText: Cust.Ref;
    successText: Cust.Ref;
    infoText: Cust.Ref;
    warningText: Cust.Ref;
    dangerText: Cust.Ref;
    lightText: Cust.Ref;
    darkText: Cust.Ref;
};
export { themesProxy as themes, themesTextProxy as themesText, };
export declare const defineBackg: (color: Color | string, autoDefineForeg?: boolean) => void;
export declare const defineForeg: (color: Color | string) => void;
export declare const defineTheme: (name: string, color: Optional<Color | string>) => void;
